<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="OWASP" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1625108587" ts_lastsave="1625113284">
    <node name="XML External Entity" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1625108621" ts_lastsave="1625108622">
      <rich_text>An XML External Entity (XXE) attack is a vulnerability that abuses features of XML parsers/data. It often allows an attacker to interact with any backend or external systems that the application itself can access and can allow the attacker to read the file on that system. They can also cause Denial of Service (DoS) attack or could use XXE to perform Server-Side Request Forgery (SSRF) inducing the web application to make requests to other applications. XXE may even enable port scanning and lead to remote code execution.

XML is eXtensible Markup Language

XML starts with a prolog = &lt;?xml version="1.0" encoding="UTF-8"?&gt;

every xml document *must* contain a root element: example

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;mail&gt;
	&lt;to&gt;&lt;/to&gt;
	&lt;from&gt;&lt;/from&gt;
	&lt;subject&gt;&lt;/subject&gt;
	&lt;text&gt;&lt;/text&gt;
&lt;/mail&gt;

Mail is the root element with children. Also case sensitive cannot be &lt;to&gt;&lt;/To&gt;

DTD stands for Document Type Definition. A DTD defines the structure and the legal elements and attributes of an XML document.

</rich_text>
      <rich_text family="monospace">&lt;!DOCTYPE note [  &lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!ELEMENT to (#PCDATA)&gt; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!ELEMENT heading (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt; ]&gt;</rich_text>
      <rich_text>


</rich_text>
      <rich_text foreground="#a52a2a">&lt;?xml</rich_text>
      <rich_text foreground="#ff0000"> version="1.0" encoding="UTF-8"?</rich_text>
      <rich_text foreground="#a52a2a">&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#a52a2a">&lt;!DOCTYPE</rich_text>
      <rich_text> </rich_text>
      <rich_text foreground="#ff0000">note SYSTEM "note.dtd"</rich_text>
      <rich_text foreground="#a52a2a">&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#a52a2a">&lt;note&gt;</rich_text>
      <rich_text>
    </rich_text>
      <rich_text foreground="#a52a2a">&lt;to&gt;</rich_text>
      <rich_text>falcon</rich_text>
      <rich_text foreground="#a52a2a">&lt;/to&gt;</rich_text>
      <rich_text>
    </rich_text>
      <rich_text foreground="#a52a2a">&lt;from&gt;</rich_text>
      <rich_text>feast</rich_text>
      <rich_text foreground="#a52a2a">&lt;/from&gt;</rich_text>
      <rich_text>
    </rich_text>
      <rich_text foreground="#a52a2a">&lt;heading&gt;</rich_text>
      <rich_text>hacking</rich_text>
      <rich_text foreground="#a52a2a">&lt;/heading&gt;</rich_text>
      <rich_text>
    </rich_text>
      <rich_text foreground="#a52a2a">&lt;body&gt;</rich_text>
      <rich_text>XXE attack</rich_text>
      <rich_text foreground="#a52a2a">&lt;/body&gt;</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#a52a2a">&lt;/note&gt;</rich_text>
      <rich_text>


• !DOCTYPE note -  Defines a root element of the document named </rich_text>
      <rich_text weight="heavy">note</rich_text>
      <rich_text>
• !ELEMENT note - Defines that the note element must contain the elements: "to, from, heading, body"
• !ELEMENT to - Defines the </rich_text>
      <rich_text family="monospace">to</rich_text>
      <rich_text> element to be of type "#PCDATA"
• !ELEMENT from - Defines the </rich_text>
      <rich_text family="monospace">from</rich_text>
      <rich_text> element to be of type "#PCDATA"
• !ELEMENT heading  - Defines the </rich_text>
      <rich_text family="monospace">heading</rich_text>
      <rich_text> element to be of type "#PCDATA"
• !ELEMENT body - Defines the body </rich_text>
      <rich_text family="monospace">element</rich_text>
      <rich_text> to be of type "#PCDATA"


</rich_text>
    </node>
    <node name="Broken access control" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1625109584" ts_lastsave="1625111388">
      <rich_text scale="h1">IDOR Challenge</rich_text>
      <rich_text>

IDOR, or Insecure Direct Object Reference, is the act of exploiting a misconfiguration in the way user input is handled, to access resources you wouldn't ordinarily be able to access. IDOR is a type of access control vulnerability.

url formation = </rich_text>
      <rich_text link="webs http://10.10.26.84/note.php?note=1">http://10.10.26.84/note.php?note=1</rich_text>
      <rich_text>

iterate over note # to find other user's notes

burp suite can do this, but slowly.

for loops are better?

for i in {1..100}; do curl </rich_text>
      <rich_text link="webs http://10.10.26.84/note.php?note=$i;">http://10.10.26.84/note.php?note=$i;</rich_text>
      <rich_text> done  - yes, this does work</rich_text>
    </node>
    <node name="XSS" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1625111970" ts_lastsave="1625111976">
      <rich_text>Cross-site scripting, also known as XSS is a security vulnerability typically found in web applications. It’s a type of injection which can allow an attacker to execute malicious scripts and have it execute on a victim’s machine.

A web application is vulnerable to XSS if it uses unsanitized user input. XSS is possible in Javascript, VBScript, Flash and CSS. There are three main types of cross-site scripting:
1. </rich_text>
      <rich_text weight="heavy">Stored XSS</rich_text>
      <rich_text> - the most dangerous type of XSS. This is where a malicious string originates from the website’s database. This often happens when a website allows user input that is not sanitised (remove the "bad parts" of a users input) when inserted into the database.
2. </rich_text>
      <rich_text weight="heavy">Reflected XSS</rich_text>
      <rich_text> - the malicious payload is part of the victims request to the website. The website includes this payload in response back to the user. To summarise, an attacker needs to trick a victim into clicking a URL to execute their malicious payload.
3. </rich_text>
      <rich_text weight="heavy">DOM-Based XSS</rich_text>
      <rich_text> - DOM stands for Document Object Model and is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content. A web page is a document and this document can be either displayed in the browser window or as the HTML source.

</rich_text>
    </node>
    <node name="Objects" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1625113284" ts_lastsave="1625113285">
      <rich_text>

A prominent element of object-oriented programming (OOP), objects are made up of two things:
- State
- Behaviour


Simply, objects allow you to create similar lines of code without having to do the leg-work of writing the same lines of code again.


For example, a lamp would be a good object. Lamps can have different types of bulbs, this would be their state, as well as being either on/off - their behaviour!


Rather than having to accommodate every type of bulb and whether or not that specific lamp is on or off, you can use methods to simply alter the state and behaviour of the lamp.

Jesus fucking christ what?

</rich_text>
      <rich_text scale="h3">Serialisation  is the process of converting objects used in programming into simpler,  compatible formatting for transmitting between systems or networks for  further processing or storage.


Alternatively,  deserialisation is the reverse of this; converting serialised  information into their complex form - an object that the application  will understand.
</rich_text>
      <rich_text>
</rich_text>
    </node>
  </node>
</cherrytree>
